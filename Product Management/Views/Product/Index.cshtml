@model X.PagedList.IPagedList<Product_Management.Models.Product>  
@using X.PagedList.Mvc.Core  
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewBag.Title = "Product Catalog";

}
<div class="container vh-100 py-4 overflow-auto">  
    <h2 class="mb-4 text-center">Product Catalog</h2>  

 <div class="row mb-4">
  <!-- Search bar -->
 <div class="col-12 col-md-4">
  <form method="get" role="search">
    <div class="mb-2">
      <label for="searchString" class="form-label d-block">Search</label>
      <div class="input-group">
        <input
          type="text"
          id="searchString"
          name="SearchProduct"
          value="@ViewBag.SearchProduct"
          class="form-control"
          placeholder="Search products by product name or category name....."
          aria-label="Search products"
        />
        <button
          class="btn btn-outline-secondary bg-primary"
          type="submit"
          aria-label="Submit search"
        >
          <svg xmlns="http://www.w3.org/2000/svg"
               width="16" height="16"
               fill="currentColor"
               class="bi bi-search text-white"
               viewBox="0 0 16 16">
            <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001
                     q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414
                     l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1
                     1-11 0 5.5 5.5 0 0 1 11 0"/>
          </svg>
        </button>
      </div>
    </div>
  </form>
</div>


<form method="get" class="col-md-2 col-12">
     <label for="sortingProduct" class="form-label">Sorting</label>
    <select name="sortingProduct" id="sortingProduct" onchange="this.form.submit()" class="form-select col-md-4 mb-3">

   <option 
    value="nameAsc"
    selected="@(ViewBag.sortProduct == "nameAsc")">
    A‑Z
  </option>

  <option 
    value="nameDesc" selected="@(ViewBag.sortProduct == "nameDesc")">
    Z‑A
  </option>

  <option 
    value="priceAsc" selected="@(ViewBag.sortProduct == "priceAsc")">
   Price Low
  </option>

  <option 
    value="priceDesc" selected="@(ViewBag.sortProduct == "priceDesc")">
    Price High
  </option>

</select>
</form>


  <!-- Filter form -->
  <div class="col-12 col-md-6">
    <form method="get" class="row gx-2 gy-1 align-items-end">
      <div class="col-8">
        <label for="CategoryID" class="form-label">Category</label>
        <select
          id="CategoryID"
          name="CategoryID"
          class="form-select"
          asp-items="ViewBag.Categories"
        >
          <option value="">All Categories</option>
        </select>
      </div>
      <div class="col-4 d-flex gap-2">
        <button
          type="submit"
          class="btn btn-primary flex-fill"
        >
          Filter
        </button>
        <a
          asp-action="Index"
          class="btn btn-outline-secondary flex-fill"
        >
          Reset
        </a>
      </div>
    </form>
  </div>
</div>






  

    <!-- Products Grid -->  
    <div class="row row-cols-1 row-cols-md-3 g-4">  
        @if (!Model.Any())  
        {  
            <div class="col">  
                <div class="alert alert-warning">No products found.</div>  
            </div>  
        }  
        else  
        {  
            @foreach (var p in Model)  
            {  
                <div class="col">  
                    <input value="@p.StockID" type="hidden"/>
                    <div class="card h-100 shadow-sm">  
                        <img src="~/@p.ProductImage"  
                             class="card-img-top"  
                             alt="@p.StockName"  
                             style="object-fit: cover; height: 200px;" />  
                        <div class="card-body d-flex flex-column">  
                            <h5 class="card-title">@p.StockName</h5>  
                            <p class="card-text mb-1"><strong>Code:</strong> @p.StockNo</p>  
                            <p class="card-text mb-1"><strong>Category:</strong> @p.Category?.CategoryName</p>  
                            <p class="card-text mb-3"><strong>Price:</strong> @p.Price</p>  
                            <p class="card-text mb-3"><strong>Status:</strong> 
                                @if (p.Active)
                                {
                                    <span class="badge bg-primary">Active</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Inactive</span>
                                }
                            </p>  
                            <div class="d-flex">
                                <a asp-action="Edit"  
                               asp-route-id="@p.StockID"  
                               class="btn btn-sm btn-outline-primary  me-2 text-primary mt-auto">  
                                Edit  
                            </a>  

                            <button type="button"
                            class="btn btn-sm btn-outline-danger text-danger "
                            data-bs-toggle="modal"
                            data-bs-target="#confirmDeleteModalProduct"
                            data-id="@p.StockID"
                            data-name="@p.StockName">
                                Delete
                            </button>
                           </div>
                        </div>  
                    </div>  
                </div>  
            }  
        }  
    </div>  


    <!-- Delete Confirmation Modal -->
<div class="modal fade" id="confirmDeleteModalProduct" tabindex="-1" aria-labelledby="confirmDeleteLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="deleteForm" method="post" asp-action="Delete">
              
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmDeleteLabel">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this product <strong id="StockName"></strong>?</p>
                </div>
                <div class="modal-footer">
                    <input type="hidden" name="id" id="StockID" />
                    @Html.AntiForgeryToken()
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Yes, Delete</button>
                </div>
            </form>
        </div>
    </div>
</div>

    <!-- Pagination -->  
    <div class="mt-4 d-flex justify-content-center">  
        @Html.PagedListPager(  
            Model,  
            page => Url.Action("Index", new {   
                page,  
                searchString = ViewBag.SearchString,  
                categoryId = ViewContext.HttpContext.Request.Query["CategoryID"]  
            }),  
            new PagedListRenderOptions  
            {  
                DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,  
                DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,  
                DisplayLinkToPreviousPage = PagedListDisplayMode.Always,  
                DisplayLinkToNextPage = PagedListDisplayMode.Always,  
                MaximumPageNumbersToDisplay = 5,  
                DisplayEllipsesWhenNotShowingAllPageNumbers = true,  
                UlElementClasses = new[] { "pagination" },  
                LiElementClasses = new[] { "page-item" },  
                PageClasses = new[] { "page-link" }  
            }  
        )  
    </div>  
</div>

                @section Scripts{

                    <script>
                        let confirmDeleteModel=document.getElementById("confirmDeleteModalProduct");
                        confirmDeleteModel.addEventListener("show.bs.modal",(e)=>{
                            console.log("work");
                            let buttonValue=e.relatedTarget;
                            let stockId=buttonValue.getAttribute("data-id");
                            let stockName=buttonValue.getAttribute("data-name");

                            let modelStockId=document.getElementById("StockID");
                            let modelStockName=document.getElementById("StockName");

                            modelStockId.value=stockId;
                            modelStockName.textContent=stockName;
                        })
                    </script>
                }